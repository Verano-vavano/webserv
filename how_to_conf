DEFINE SPACE_MODE must be declared on the first line of the file and written in a strict manner (no extra space between DEFINE and SPACE_MODE)

Unnamed or unknown blocks will be ignored

Errors by default are ignored (except if DEFINE ERROR_STOP toggled). Fatal errors can occure in case of fatal mistakes in the config file

Comments must be on new command and last until a separator is found
'http #start of HTTP block {' <- invalid
'http { #start of HTTP block server { ...' <- invalid (not separated)
'http { #start of HTTP block; server { ...' <- valid


'server 8080 { ... }' == 'server { listen 8080; ... }'
'server localhost:8080 { ... }' ~= 'server { listen 8080; server_name localhost; ... }'
|-> not exactly the same as it forces create a new one (copied from first existing one)

For boolean methods (absolute_redirect for example), not specifying an argument will toggle it on.
To toggle it off, an 'off' argument must be specified.
Hence "absolute_redirect;" == "absolute_redirect on;"
To make so not specifying an argument toggles on and off, please specify the define TOGGLE_BOOL.


CGIs:
- cgi-interpreter will associate a file extension with an interpreter
- cgi-exec will mark the following files as executables. Thus if the extension is not in the cgi-interpreter list, it will try to be executed as is.
Every executably marked file will be executed. Be careful about wildcards !
Interpreters have priority over exec. Hence if a file is marked as both interpretable and executable, it will be interpreted first. If the interpreter fails, the cgi will fail and will not attemp to be executed. Be careful about what you mark as interpretable and what you mark as executable.

dir_listing is a boolean method linked to a location that will enable or disable the directory listing for said location. On a non location scope, it will be applied to / (although not recommanded)
dir_listing is similar to nginx's auto_index.

methods is a list applied to a location that will enable methods. Wildcards are allowed, but risky. If the method starts with /, it will be forbidden. If not_methods used, it will disable by default. Thus:
methods std; # enables all standard methods;
methods /std; # disables all standard methods;
methods * /get; # enables all methods except get;
methods std /get /post;
methods std; not_methods get post;
not_methods * /get; # disables all methods except get;
All leading slashes but one are ignored (///get == /get)
By default, only GET, POST and DELETE methods are allowed.
std is a keyword representing the default methods.

post_func describes how POST will be handled in a location.
In an ideal world, it would be able to transfer it to another server / app to handle, but due to the inability to fork, there are two functions available natively.
client_manager will handle client creation, login, logout et login fails.
upload_manager will allow the upload of files on the server.

Logs:
Add the tag 'independant' to create a specific file for the scope. You must specify an outfile with =outfile (outfile being the name of course) or else it will be ignored
Add the tag 'focused' to add it to the focus file.
logs inside location have priority over server logs.
'log nothing' will remove every log attribute to the current location.
The preferred method to relog a location is by using 'unlog server' for example
So in a way, 'log nothing' and 'unlog all' are actually the same
