EPOLL aka mr Paul

Attend, il regarde, il boit son vin

Nous : Mr Paul, voici un petit vecteur avec pleins structs
Paul : Merci bien mon cher, vous etes bien aimables

struct {
	int fd;
	int events;
	int	revents;
}

serveur.fd = serverSocket;
serveur.events = EPOLLIN;

fd = file descriptor
events = bitmask qui va contenir tous les evenements qui nous interessent :
EPOLLIN : le fd a des trucs dedans, lis frr
EPOLLOUT : le fd attend de lire. ecris frr
revents = bitmask qui va contenir tous les evenements recus


{serveur(EPOLLIN)}


epoll_wait
Paul : wesh, qqun fait qqchose

revents = EPOLLIN
serveur EPOLLIN : client qui veut se co -> accept()

client0.fd = clientSocket;
client0.events = EPOLLIN;

{serveur(EPOLLIN), client0(EPOLLIN)}


epoll_wait
Paul : wesh, qqun fait qqchose

client0 revents(EPOLLIN)
recv client0 a une requete
GET /data/lol.html HTTP/1.1...

client0.events = EPOLLOUT


epoll_wait
Paul : wesh, qqun fait qqchose

client0 revents(EPOLLOUT)
send response
HTTP/1.1...
events = EPOLLIN



SERVEUR EPOLLIN : Nouveau client veut se co
CLIENT EPOLLIN recv bytes != 0 : Client il papote
CLIENT EPOLLIN recv bytes = 0 : Client s'est deconnecte
CLIENT EPOLLOUT : On peut send des trucs


Nous :
